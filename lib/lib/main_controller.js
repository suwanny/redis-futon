// Generated by CoffeeScript 1.3.3
var MainController, RedisInterface;

RedisInterface = require('./redis_interface');

MainController = (function() {

  function MainController(port) {
    this.redis = new RedisInterface("localhost", port);
    this.routes = [
      {
        path: "/redis/info",
        http_method: "get",
        method: "redis_info"
      }, {
        path: "/redis/select/:db",
        http_method: "get",
        method: "redis_select"
      }, {
        path: "/redis/database",
        http_method: "get",
        method: "redis_database"
      }, {
        path: "/redis/keys/:_filter",
        http_method: "get",
        method: "redis_keys"
      }, {
        path: "/redis/keys",
        http_method: "get",
        method: "redis_keys"
      }, {
        path: "/redis/get/:key",
        http_method: "get",
        method: "redis_get"
      }, {
        path: "/redis/set",
        http_method: "post",
        method: "redis_set"
      }, {
        path: "/redis/command",
        http_method: "post",
        method: "redis_command"
      }, {
        path: "/redis/list/:key",
        http_method: "get",
        method: "redis_get_list"
      }, {
        path: "/redis/list/:key/:index",
        http_method: "get",
        method: "redis_get_list_index"
      }, {
        path: "/redis/hash/:key",
        http_method: "get",
        method: "redis_get_hash"
      }, {
        path: "/redis/set/:key",
        http_method: "get",
        method: "redis_get_set"
      }, {
        path: "/redis/zset/:key",
        http_method: "get",
        method: "redis_get_zset"
      }
    ];
    return;
  }

  MainController.prototype.redis_info = function(req, res) {
    return this.redis.info(function(err, data) {
      return res.json(data);
    });
  };

  MainController.prototype.redis_select = function(req, res) {
    var db;
    logger.info("redis_select", req.params);
    db = req.params.db;
    return this.redis.select(db, function(err, data) {
      return res.json({
        err: err,
        resp: data
      });
    });
  };

  MainController.prototype.redis_database = function(req, res) {
    logger.info("redis_database", this.redis.database());
    return res.json({
      database: this.redis.database()
    });
  };

  MainController.prototype.redis_keys = function(req, res) {
    var filter, redis;
    filter = req.params._filter || "*";
    redis = this.redis;
    return this.redis.get_keys(filter, function(err, data) {
      return res.json({
        err: err,
        database: redis.database(),
        keys: data
      });
    });
  };

  MainController.prototype.redis_get = function(req, res) {
    var key;
    key = req.params.key;
    return this.redis.get(key, function(err, data) {
      return res.json({
        err: err,
        resp: data
      });
    });
  };

  MainController.prototype.redis_set = function(req, res) {
    return this.redis.set(req.body.key, req.body.value, function(err, data) {
      return res.json({
        err: err,
        resp: data
      });
    });
  };

  MainController.prototype.redis_command = function(req, res) {
    logger.info("redis_command", req.body);
    return this.redis.send_command(req.body.command, req.body.args, function(err, data) {
      return res.json({
        err: err,
        resp: data
      });
    });
  };

  MainController.prototype.redis_get_list = function(req, res) {
    var key;
    key = req.params.key;
    return this.redis.client.llen([key], function(err, data) {
      var len, _i, _results;
      if (err) {
        return res.json([]);
      } else {
        len = parseInt(data);
        return res.json((function() {
          _results = [];
          for (var _i = 0; 0 <= len ? _i < len : _i > len; 0 <= len ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this));
      }
    });
  };

  MainController.prototype.redis_get_list_index = function(req, res) {
    var index, key;
    key = req.params.key;
    index = req.params.index;
    return this.redis.client.lindex([key, index], function(err, data) {
      var json_data;
      if (err) {
        return res.json(err);
      } else {
        try {
          json_data = JSON.parse(data);
          return res.json(json_data);
        } catch (error) {
          return res.send(data);
        }
      }
    });
  };

  MainController.prototype.redis_get_set = function(req, res) {
    var key;
    key = req.params.key;
    return this.redis.client.smembers([key], function(err, data) {
      if (err) {
        return res.json([]);
      } else {
        return res.json(data);
      }
    });
  };

  MainController.prototype.redis_get_hash = function(req, res) {
    var key;
    key = req.params.key;
    return this.redis.client.hgetall([key], function(err, data) {
      if (err) {
        return res.json({});
      } else {
        return res.json(data);
      }
    });
  };

  MainController.prototype.redis_get_zset = function(req, res) {
    var key;
    key = req.params.key;
    return this.redis.client.zrangebyscore([key, "-inf", "+inf", "WITHSCORES"], function(err, data) {
      var i, list_by_score, val, _i, _len, _step;
      if (err) {
        return res.json([]);
      } else {
        list_by_score = [];
        for (i = _i = 0, _len = data.length, _step = 2; _i < _len; i = _i += _step) {
          val = data[i];
          list_by_score.push({
            index: i / 2,
            value: val,
            score: data[i + 1]
          });
        }
        return res.json(list_by_score);
      }
    });
  };

  return MainController;

})();

module.exports = MainController;
